<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd"
       default-lazy-init="true">

    <!-- 记录日志信息 -->
    <bean id="baseDatasource" class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
        <!-- 初始化时建立物理连接的个数，缺省0 -->
        <property name="initialSize" value="${jdbc.initialSize:1}"/>
        <!-- 最小连接数 -->
        <property name="minIdle" value="${jdbc.minIdle:1}"/>
        <!-- 最大连接数，缺省8 -->
        <property name="maxActive" value="${jdbc.maxActive:8}"/>

        <!-- 修改maxWait大于0，自动转换为fair模式。
            fair模式并发量下降但公平，unfair模式并发高但可能出现严重不公，个别线程会等到超时了还获取不到连接 -->
        <property name="maxWait" value="${jdbc.maxWait:1000}"/>

        <!-- 设置从连接池获取连接时是否检查连接有效性，true时，每次都检查；false时，不检查 -->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow:true}"/>
        <!-- 设置往连接池归还连接时是否检查连接有效性，true时，每次都检查；false时，不检查 -->
        <property name="testOnReturn" value="${jdbc.testOnReturn:false}"/>
        <!-- 设置从连接池获取连接时是否检查连接有效性，true时，如果连接空闲时间超过minEvictableIdleTimeMillis进行检查；false时，不检查 -->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle:true}"/>
        <!-- 配置间隔多久启动一次DestroyThread，对连接池内的连接才进行一次检测，单位是毫秒。
            检测时:1.如果连接空闲并且超过minIdle以外的连接，如果空闲时间超过minEvictableIdleTimeMillis设置的值则直接物理关闭。
            2.在minIdle以内的不处理。
        -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis:30000}"/>
        <!-- 配置一个连接在池中最大空闲时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis:30000}"/>
        <!-- 连接泄露检查，打开removeAbandoned功能 , 连接从连接池借出后，长时间不归还，将触发强制回收连接。
            回收周期随timeBetweenEvictionRunsMillis进行，如果连接为从连接池借出状态，并且未执行任何sql，
            并且从借出时间起已超过removeAbandonedTimeout时间，则强制归还连接到连接池中。
            框架提示：生产要关闭该选项!!! 超长时间的sql或procedure执行尚未结束而被强制回收的话，将导致异常!!!-->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned:false}"/>
        <!-- 超时时间，秒 -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout:30}"/>
        <!-- 关闭abandoned连接时输出错误日志，这样出现连接泄露时可以通过错误日志定位忘记关闭连接的位置 -->
        <property name="logAbandoned" value="${jdbc.logAbandoned:true}"/>

        <!-- 配置监控统计日志的输出间隔，单位毫秒，大于0则开启，每次输出所有统计数据会重置，酌情开启 -->
        <property name="timeBetweenLogStatsMillis" value="${druid.timeBetweenLogStatsMillis:0}"/>
        <!-- 打开后，增强timeBetweenEvictionRunsMillis的周期性连接检查，minIdle内的空闲连接，
            每次检查强制验证连接有效性. 参考：https://github.com/alibaba/druid/wiki/KeepAlive_cn -->
        <property name="keepAlive" value="true"/>
        <!-- druid的sql过滤器, 定义在druid.xml -->
        <property name="proxyFilters">
            <list>
                <!-- 统计监控信息, 有慢sql打印, 比较实用 -->
                <ref bean="stat-filter"/>
                <!-- sql防御(可选, 开启的话, 需配置druid.wall.dbType参数) -->
                <!--<ref bean="wall-filter"/>-->
                <!-- sql log(可选, 但实测效果不好) -->
                <!--<ref bean="log-filter"/>-->
            </list>
        </property>
    </bean>

</beans>